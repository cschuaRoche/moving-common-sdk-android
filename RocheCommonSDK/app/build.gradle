import com.roche.ssg.buildsrc.*

plugins {
    id 'com.android.application'
    id 'kotlin-android'
    id 'kotlin-kapt'
    id 'dagger.hilt.android.plugin'
}

apply plugin: "androidx.navigation.safeargs.kotlin"
apply plugin: 'com.google.gms.google-services'
apply from: "signing.gradle"

android {
    compileSdkVersion ConfigData.compileSdkVersion
    buildToolsVersion ConfigData.buildToolsVersion

    packagingOptions {
        pickFirst 'META-INF/*'
    }

    // Load values from config.properties file
    def configPropertiesFile = rootProject.file("app/config.properties")
    def configProperties = new Properties()
    configProperties.load(new FileInputStream(configPropertiesFile))

    defaultConfig {
        applicationId "com.roche.ssg.sample"
        minSdkVersion ConfigData.minSdkVersion
        targetSdkVersion ConfigData.targetSdkVersion
        versionCode ConfigData.versionCode
        versionName ConfigData.versionName

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        buildConfigField "String", "SALESFORCE_ORG_ID", configProperties["SALESFORCE_ORG_ID"]
        buildConfigField "String", "SALESFORCE_DEPLOYMENT_ID", configProperties["SALESFORCE_DEPLOYMENT_ID"]
        buildConfigField "String", "SALESFORCE_BUTTON_ID", configProperties["SALESFORCE_BUTTON_ID"]
        buildConfigField "String", "SALESFORCE_LIVE_AGENT_POD", configProperties["SALESFORCE_LIVE_AGENT_POD"]

        buildConfigField "String", "BASE_URL", configProperties["BASE_URL"]
        buildConfigField "String", "LICENSE_KEY", configProperties["LICENSE_KEY"]
        buildConfigField "Boolean", 'IS_OFFLINE_MODE', configProperties["IS_OFFLINE_MODE"]

    }

    buildTypes {
        release {
            minifyEnabled false
            debuggable false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            buildConfigField "Boolean", 'ENABLE_SECURITY', "true"
            signingConfig signingConfigs.release
        }

        debug {
            testCoverageEnabled true
            debuggable true
            buildConfigField "Boolean", 'ENABLE_SECURITY', "false"
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }

    dataBinding {
        enabled = true
    }
    viewBinding {
        enabled = true
    }
    configurations {
        all*.exclude group: 'com.google.guava', module: 'listenablefuture'
    }
}

dependencies {

    implementation Deps.AndroidX.Navigation.navigationFragmentKtx
    implementation Deps.AndroidX.Navigation.navigationUiKtx

    implementation Deps.kotlin
    implementation Deps.AndroidX.coreKtx
    implementation Deps.AndroidX.appCompat
    implementation Deps.materialDesign
    implementation Deps.AndroidX.constraintLayout

    // firebase
    implementation platform(Deps.Firebase.firebaseBom)
    implementation Deps.Firebase.firebaseAnalyticsKtx
    implementation Deps.Firebase.firebaseMessaging

    // salesforce
    implementation Deps.Salesforce.chatCore
    implementation Deps.Salesforce.chatUi
    // required by salesforce to fix a dependency crash
    implementation Deps.AndroidX.legacySupportV4

    // internal libs
    implementation project(path: ':staticContent')
    implementation project(path: ':biometrics')
    implementation project(path: ':security')
    implementation 'RocheCommonComponent:recall:1.0.0'
    implementation project(path: ':systemMessages')
    implementation 'RocheCommonComponent:pushNotification:1.0.0'

    //  this is required if the security library is integrated via project source
    implementation project(path: ':lvl_library')
    implementation project(path: ':rocheCommon')
    implementation Deps.RocheCommonComponent.utils

    implementation Deps.AndroidX.Biometric.biometric
    implementation Deps.AndroidX.Security.securityCrypto

    //uiautomator
    androidTestImplementation Deps.AndroidX.Test.uiautomator
    // testing
    testImplementation Deps.junit
    androidTestImplementation Deps.AndroidX.Test.testExt
    androidTestImplementation Deps.AndroidX.Test.espressoCore
    androidTestImplementation Deps.testRules
    androidTestImplementation Deps.espressoContrib

    //Split.io
    implementation Deps.splitAndroidClient
    implementation Deps.gson

    //Amplify
    implementation Deps.awsAuthCognito

    //Amplitude Analytics
    implementation Deps.Amplitude.androidSdk
    implementation Deps.SquareUp.okhttp
    implementation Deps.Amplitude.experimentAndroidClient

    //Hilt
    implementation Deps.Hilt.hiltAndroid
    kapt Deps.Hilt.hiltCompiler
}