# Bitbucket Pipelines Template to build, test your Android Application.

# This template contains 3 parallel steps to build Android application, run Android code scanning tool and run unit tests.
# For more details see https://support.atlassian.com/bitbucket-cloud/docs/configure-bitbucket-pipelinesyml/

# Docker for Android SDK 30 with pre-installed build tools and emulator image.
# Note: This docker image is created and maintained by a non official third party. For more details see: https://hub.docker.com/r/androidsdk/android-30
image: androidsdk/android-30

definitions:
   steps:
    - step: &runTests          # step to build Android debug application
        name: Execute Unit testcase
        size: 2x
        caches:       # caching speed up subsequent execution https://support.atlassian.com/bitbucket-cloud/docs/cache-dependencies/
          - gradle
        script:
          - cd RocheCommonSDK
          - ./gradlew testDebugUnitTest
    - step: &runTestsForModule         # step to build Android debug application
        name: Execute Unit testcase
        size: 2x
        caches: # caching speed up subsequent execution https://support.atlassian.com/bitbucket-cloud/docs/cache-dependencies/
          - gradle
        script:
          - cd RocheCommonSDK
          - ./gradlew $PROJECT:testDebugUnitTest
          - ls
          - echo $BITBUCKET_CLONE_DIR
          - ls $BITBUCKET_CLONE_DIR
          - ls $PROJECT/build/reports/tests/testDebugUnitTest
        artifacts:
          - biometrics/build/reports/tests/testDebugUnitTest/index.html
    - step: &buildArtifact          # step to build Android debug application
        name: Build Application
        size: 2x
        caches: # caching speed up subsequent execution https://support.atlassian.com/bitbucket-cloud/docs/cache-dependencies/
          - gradle
        script:
          - cd RocheCommonSDK
          - chmod +x gradlew
          - ./gradlew $PROJECT:assembleRelease
        artifacts:
          - RocheCommonSDK/app/build/outputs/apk/debug/app-debug.apk
          - RocheCommonSDK/app/build/outputs/apk/release/app-release.apk
    - step: &uploadToJFrog          # step to upload the library artifact to JFrog artifactory
        name: Build Application
        script:
          - pipe: jfrog/jfrog-setup-cli:1.0.0
          - source ./jfrog-setup-cli.sh
          - jfrog rt c --url=$JFROG_URL --user=$JFROG_USER_NAME --password=$JFROG_USER_PWD
          - jfrog rt ping
    - step: &buildAPP
        name: Generate the relese build of ssg sample application
        caches:
          - gradle
        script:
          - cd RocheCommonSDK
          - chmod +x gradlew
          - ./gradlew app:assembleRelease
        artifacts:
          - RocheCommonSDK/app/build/outputs/apk/release/app-release.apk
    - step: &deployToFirebase
       name: Deploy To Firebase
       caches:
         - node
       image: node
       script:
         - npm install -g firebase-tools
         - firebase appdistribution:distribute $APK_PATH --app $FIREBASE_APP_ID --groups $FIREBASE_GROUPS
pipelines:
  custom:
    unittestcase-pipeline:
      - variables:
          - name: PROJECT
      - step: *runTestsForModule